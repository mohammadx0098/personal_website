version: '3.8'
networks:
  my-site:
    name: my-site
  traefik-public:
    external: true

volumes:
  postgres_data:
  static_volume:

services:

  web:
    build:
      context: .
      dockerfile: ./docker/production.Dockerfile
    image: personal_website-django
    build: .
    # '/start' is the shell script used to run the service
    command: sh ./docker/web_entrypoint.sh
    # this volume is used to map the files and folders on the host to the container
    # so if we change code on the host, code in the docker container will also be changed
    environment:
      - DATABASE_URL=psql://postgres_user:postgres_password@db:5432/personal_website
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
    volumes:
      - static_volume:/app/staticfiles
      - .:/app
    expose:
      - 8000
    # ports:
    #   - 8000:8000
    # env_file is used to manage the env variables of our project
    # env_file:
    #   - ./.env/.dev-sample
    networks:
      - my-site
      - traefik-public
    depends_on:
      - db
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]   
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-public"
      - "traefik.http.routers.django2.entrypoints=http"
      - "traefik.http.routers.django2.rule=Host(`${HOST}`)"
      - "traefik.http.routers.django2.middlewares=https-redirect"
      - "traefik.http.routers.django2-secure.entrypoints=https"
      - "traefik.http.routers.django2-secure.rule=Host(`${HOST}`)"
      - "traefik.http.routers.django2-secure.tls=true"
      - "traefik.http.routers.django2-secure.tls.options=default"
      - "traefik.http.routers.django2-secure.tls.certresolver=letsencrypt"
      - "traefik.http.services.django2.loadbalancer.server.port=8000"

  db:
    image: postgres:14.1
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=personal_website
      - POSTGRES_USER=postgres_user
      - POSTGRES_PASSWORD=postgres_password
    command: postgres -c 'max_connections=500'
    # ports:
    #   - "5432:5432"
    networks:
      - my-site
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]